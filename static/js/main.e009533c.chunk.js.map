{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pokemonlist","filterInput","_this2","fetch","then","response","json","data","setState","results","fetchPokemons","url","split","event","target","value","_this3","pokemons","slice","filter","pokemon","name","startsWith","map","i","react_default","a","createElement","key","className","src","concat","getIdFromUrl","alt","type","placeholder","onChange","handleTextInput","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAyEeA,qBAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,YAAa,GACbC,YAAa,IALET,+EASH,IAAAU,EAAAP,KACdQ,MAbY,yDAcTC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAC1BR,YAAaO,EAAKE,wDAMtBd,KAAKe,qDAGMC,GACX,OAAOA,EAAIC,MAAM,KAAK,2CAGRC,GACdlB,KAAKa,SAAS,CACZP,YAAaY,EAAMC,OAAOC,yCAOrB,IAAAC,EAAArB,KACDsB,EAAWtB,KAAKI,MAAMC,YACzBkB,QACAC,OAAO,SAAAC,GAAO,MACc,KAA3BJ,EAAKjB,MAAME,YAAqBmB,EAAUA,EAAQC,KAAKC,WAAWN,EAAKjB,MAAME,eAG9EsB,IAAI,SAACH,EAASI,GAAV,OACHC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAGK,UAAU,YACpBJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKG,IAAG,4EAAAC,OAA8Ef,EAAKgB,aAAaZ,EAAQT,KAAxG,QAAoHsB,IAAI,8BAElIR,EAAAC,EAAAC,cAAA,UAAKP,EAAQC,SAKnB,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLC,YAAY,SACZpB,MAAOpB,KAAKI,MAAME,YAClBmC,SAAUzC,KAAK0C,gBAAgBC,KAAK3C,QAEtC8B,EAAAC,EAAAC,cAAA,WAAMV,WA9DIsB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.e009533c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst API_URL = \"https://pokeapi.co/api/v2/pokemon/?limit=80&offset=80\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pokemonlist: [],\n      filterInput: '',\n    }\n  }\n\n  fetchPokemons() {\n    fetch(API_URL)\n      .then(response => response.json())\n      .then(data => this.setState({\n        pokemonlist: data.results\n      })\n      );\n  }\n\n  componentDidMount() {\n    this.fetchPokemons();\n  }\n\n  getIdFromUrl(url) {\n    return url.split(\"/\")[6];\n  }\n\n  handleTextInput(event) {\n    this.setState({\n      filterInput: event.target.value\n    });\n    //OnChange\n    //input nås genom event.target.value.\n  }\n\n\n  render() {\n    const pokemons = this.state.pokemonlist\n      .slice()\n      .filter(pokemon =>\n        this.state.filterInput === '' ? pokemon : pokemon.name.startsWith(this.state.filterInput))\n      //om sökrutan är tom så laddas pokemon, om söktext matas in så körs includes().\n      //alt. startsWith().\n      .map((pokemon, i) => (\n        <ul key={i} className=\"pokemons\">\n          <li>\n            <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.getIdFromUrl(pokemon.url)}.png`} alt=\"a collection of pokemons\" />\n          </li>\n          <li>{pokemon.name}</li>\n        </ul>\n      ));\n\n\n    return (\n      <div>\n        <h1>Pokedex</h1>\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          value={this.state.filterInput}\n          onChange={this.handleTextInput.bind(this)}\n        />\n        <div>{pokemons}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}